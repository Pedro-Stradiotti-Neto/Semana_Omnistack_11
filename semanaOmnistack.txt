Semana Omnistack (23/03/2020)
- Desenvolvimento Web: Obrigatório o conhecimento de JavaScript

Conceitos Básicos
- Notion: Anotacões online
- Aplicacão "Be the Hero": Conectar pessoas que gostam de ajudar e unir a ONG`s

Back-End (coracão da aplicacão)
- Tudo aquilo que o usuário não vê
  - Regras de negócio;
  - Conexão BD;
  - Comunic. webservice;
  - Autenticacão dos usuários (email e senha)
  - Criptografica e seguranca
- Comunicacão entre as plataformas em JSON (Estrutura de comunicacão de dados)

Front-End
- Tudo o que o usuário vê, tanto na Web como também Mobile

Entendendo o React

Abordagem Tradicional
Requisicão -> BackEnd recebe e envia a página inteira -> Resposta HTML

Abordarem SPA (Single Page Aplication)
Requisicão -> BackEnd recebe e envia um JSON com os dados -> Resposta JSON: somente um array
Tudo controlado pelo React que está no FrontEnd, principalmente as rotas

Entendendo o React-Native

Abordagem Tradicional
 Cria-se aplicacões de acordo com as plataformas que for disponibilizada, sendo o trabalho repetitivo
 Na hora de prestar suporte ou correcões, deve-se fazer em todas as plataformas

Abordagem React-Native
 Desenvolve-se somente uma aplicacão, onde a mesma pode ser "convertido" para as plataformas que quer,
facilitando na hora de prestar suporte e correcões
 Somente uma linguagem para se programar

Por que usararemos o Expo?
 Framework para o React-Native, conjunto de ferramentas para se utilizar as funcionalidades do celular
 Só nós preocupamos em desenvolver um código com o React e React-Native, enviando somente JavaScript,
enquanto isso o Expo faz todo o controle das conversões para o Android e IOS

Semana Omnistack (24/03/2020)
Criacão do Back-End:



Semana Omnistack (25/03/2020)

Conceitos do React
 Compomente é uma funcão que retorna HTML, pode-se ter funcionalidades JS, CSS
 JSX - Quando o HTML está integrado dentro do JavaScript
 Propriedades - informacoes e/ou dados a serem passados para ser integrado no HTML
 Estado - Informacão mantida pelo componente
 Imutabilidade - Por questão de performance, nunca pode-se alterar um valor de estado de forma direta
sendo necessário sobrepor o mesmo

Semana Omnistack (26/03/2020)
Reactive Native
- Semântica (Não há deferencas como em HTML
// <View> </View> -> div, header, footer, aside, section
// <Text> </Text> -> p, h1, h2, etc
- Estilizacão
// Já possui flexbox imbutido, não necessitando colocar
// Estilizacão própria para cada elemento (individualmente)

"Expo" -> Faz todo o desenvolvimento Mobile da aplicacão, vendo os testes em tempo real
  |-> Routing and Navigation -> Auxilia na navegacão das páginas do app
"Axios" -> Responsável por fazer as chamadas API e trazer as respostas do backend


Semana Omnistack (27/03/2020)
"Celebrate" -> Biblioteca para fazer validacões. Faz a integracão do 'joi' (criado pela hapi) com o express
	Validacão do BODY
		routes.post("/ongs", celebrate({
    			[Segments.BODY]: Joi.object().keys({
        			name: Joi.string().required(),
        			email: Joi.string().required().email(),
        			whatsapp: Joi.number().required().min(10).max(11),
        			city: Joi.string().required(),
        			uf: Joi.string().required().length(2),
    			})
		}), OngController.create);

	Validacão do HEADERS
		routes.get("/profile", celebrate({
    			[Segments.HEADERS]: Joi.object({
        			authorization: Joi.string().required(),
    			}).unknown()
		}), ProfileController.index);

	Validacão do Query
		routes.get("/incedents", celebrate({
    			[Segments.QUERY]: Joi.object().keys({
        			page: Joi.number()
    			})
		}), IncidentsController.index);

Por quê fazer testes?
	Sempre necessita de testes, porém a forma manual só funciona quando se tem poucas páginas,
em aplicacões com mais de 1000 páginas, já se torna inviável (até menos que isso).

TDD (Test-driven Development)
	Auxilia na execucão de testes (Buscar mais informacões depois)

"Jest" (npm i jest) -> Vai realizar os testes junto a sua app
	integration -> Realiza o teste na rota/funcionalidade inteira da nossa aplicacão
	

	unit -> Realiza o teste expecífico de uma funcionalidade (não tendo conexão com nada mais)
		describe('Generate Unique Id', () => {
    			it('should generate an unique ID', () => {
        		expect(2 + 2).toBe(5);
    			})
		});


"Cross-env" (npm i cross-env) -> 
"Super-Test" (npm i supertest) -> Faz as comunicacões HTTP, como também trás mais algumas validacões a mais
	Para Headers
		.set('Authorization','id válido')

Deploy -> Onde irá hospedar sua app?
	BackEnd
1	Somente para testar com amiguinhos (heroku.com - node), video na rockseat
2	App pequenas, mas comerciais (digitalocean.com - node), video na rockseat
3	App maiores, necessário uma pessoa específica (AWS / Google Cloud Platform / Microsoft )

	FrontEnd
1	netlify
2	netlify

Estudos daqui pra frente
	Padrões de código: ESLint, Prettier
	Autenticacão JWT
	Styled Components